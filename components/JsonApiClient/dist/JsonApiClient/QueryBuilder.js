"use strict";
/**
 * Copyright 2015-2017 info@neomerx.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class QueryBuilder {
    constructor(type) {
        this.enableEncodeUri();
        this.type = type;
    }
    onlyFields(...fields) {
        this.fields = fields;
        return this;
    }
    withFilters(...filters) {
        this.filters = filters;
        return this;
    }
    withSorts(...sorts) {
        this.sorts = sorts;
        return this;
    }
    withIncludes(...relationships) {
        this.includes = relationships;
        return this;
    }
    withPagination(offset, limit) {
        offset = Math.max(-1, Math.floor(offset));
        limit = Math.max(0, Math.floor(limit));
        if (offset >= 0 && limit > 0) {
            this.offset = offset;
            this.limit = limit;
        }
        else {
            this.offset = undefined;
            this.limit = undefined;
        }
        return this;
    }
    enableEncodeUri() {
        this.isEncodeUriEnabled = true;
        return this;
    }
    disableEncodeUri() {
        this.isEncodeUriEnabled = false;
        return this;
    }
    read(index, relationship) {
        const relationshipTail = relationship === undefined ? `/${index}` : `/${index}/${relationship}`;
        const result = `/${this.type}${relationshipTail}${this.buildParameters(false)}`;
        return this.isEncodeUriEnabled === true ? encodeURI(result) : result;
    }
    index() {
        const result = `/${this.type}${this.buildParameters(true)}`;
        return this.isEncodeUriEnabled === true ? encodeURI(result) : result;
    }
    /**
     * @internal
     */
    buildParameters(isIncludeNonFields) {
        let params = null;
        // add field params to get URL like '/articles?include=author&fields[articles]=title,body&fields[people]=name'
        // see http://jsonapi.org/format/#fetching-sparse-fieldsets
        if (this.fields !== undefined && this.fields.length > 0) {
            let fieldsResult = '';
            for (let field of this.fields) {
                const curResult = `fields[${field.type}]=${this.separateByComma(field.fields)}`;
                fieldsResult = fieldsResult.length === 0 ? curResult : `${fieldsResult}&${curResult}`;
            }
            if (fieldsResult.length > 0) {
                params = fieldsResult;
            }
        }
        // add filter parameters to get URL like 'filter[id][greater-than]=10&filter[id][less-than]=20&filter[title][like]=%Typ%'
        // note: the spec do not specify format for filters http://jsonapi.org/format/#fetching-filtering
        if (isIncludeNonFields === true && this.filters !== undefined && this.filters.length > 0) {
            let filtersResult = '';
            for (let filter of this.filters) {
                const params = filter.parameters;
                const curResult = params === undefined ?
                    `filter[${filter.field}][${filter.operation}]` :
                    `filter[${filter.field}][${filter.operation}]=${this.separateByComma(params)}`;
                filtersResult = filtersResult.length === 0 ? curResult : `${filtersResult}&${curResult}`;
            }
            if (filtersResult.length > 0) {
                params = params === null ? filtersResult : `${params}&${filtersResult}`;
            }
        }
        // add sorts to get URL like '/articles?sort=-created,title'
        // see http://jsonapi.org/format/#fetching-sorting
        if (isIncludeNonFields === true && this.sorts !== undefined && this.sorts.length > 0) {
            let sortsList = '';
            for (let sort of this.sorts) {
                const sortParam = `${sort.isAscending === true ? '' : '-'}${sort.field}`;
                sortsList = sortsList.length > 0 ? `${sortsList},${sortParam}` : sortParam;
            }
            const sortsResult = `sort=${sortsList}`;
            params = params === null ? sortsResult : `${params}&${sortsResult}`;
        }
        // add includes to get URL like '/articles/1?include=author,comments.author'
        // see http://jsonapi.org/format/#fetching-includes
        if (isIncludeNonFields === true && this.includes !== undefined && this.includes.length > 0) {
            const includesResult = `include=${this.separateByComma(this.includes)}`;
            params = params === null ? includesResult : `${params}&${includesResult}`;
        }
        // add pagination to get URL like '/articles?page[offset]=50&page[limit]=25'
        // note: the spec do not strictly define pagination parameters
        if (isIncludeNonFields === true && this.offset !== undefined && this.limit !== undefined) {
            const paginationResult = `page[offset]=${this.offset}&page[limit]=${this.limit}`;
            params = params === null ? paginationResult : `${params}&${paginationResult}`;
        }
        const result = params === null ? '' : `?${params}`;
        return result;
    }
    /**
     * @internal
     */
    separateByComma(values) {
        return Array.isArray(values) === true ? values.join(',') : `${values}`;
    }
}
exports.QueryBuilder = QueryBuilder;
//# sourceMappingURL=data:application/json;base64,