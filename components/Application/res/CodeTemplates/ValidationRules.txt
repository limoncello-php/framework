<?php namespace App\Validation\{%SINGULAR_CC%};

use App\Api\{%PLURAL_CC%}Api;
use App\Data\Models\{%SINGULAR_CC%} as Model;
use App\Json\Schemas\{%SINGULAR_CC%}Schema;
use App\Validation\BaseRules;
use Limoncello\Validation\Contracts\Rules\RuleInterface;

/**
 * @package App
 *
 * @SuppressWarnings(PHPMD.StaticAccess)
 */
final class {%SINGULAR_CC%}Rules extends BaseRules
{
    /**
     * @param RuleInterface|null $next
     *
     * @return RuleInterface
     */
    public static function {%SINGULAR_LC%}Type(RuleInterface $next = null): RuleInterface
    {
        return self::equals({%SINGULAR_CC%}Schema::TYPE);
    }

    /**
     * NOTE: It recommended to move this method to `BaseRules` so it will be accessible in all validation rule sets.
     *
     * @param RuleInterface|null $next
     *
     * @return RuleInterface
     */
    public static function {%SINGULAR_LC%}Id(RuleInterface $next = null): RuleInterface
    {
        return self::stringToInt(self::readable({%PLURAL_CC%}Api::class, $next));
    }

    /**
     * NOTE: It recommended to move this method to `BaseRules` so it will be accessible in all validation rule sets.
     *
     * @param RuleInterface|null $next
     *
     * @return RuleInterface
     */
    public static function {%SINGULAR_LC%}Relationship(RuleInterface $next = null): RuleInterface
    {
        return self::toOneRelationship({%SINGULAR_CC%}Schema::TYPE, self::{%SINGULAR_LC%}Id($next));
    }

    /**
     * NOTE: It recommended to move this method to `BaseRules` so it will be accessible in all validation rule sets.
     *
     * @param RuleInterface|null $next
     *
     * @return RuleInterface
     */
    public static function {%PLURAL_LC%}Relationship(RuleInterface $next = null): RuleInterface
    {
        $readableAll = self::stringArrayToIntArray(self::readableAll({%PLURAL_CC%}Api::class, $next));

        return self::toManyRelationship({%SINGULAR_CC%}Schema::TYPE, $readableAll);
    }

    /**
     * @return RuleInterface
     */
    public static function title(): RuleInterface
    {
        $maxLength = Model::getAttributeLengths()[Model::FIELD_TITLE];

        return self::asSanitizedString(self::stringLengthMax($maxLength));
    }

    /**
     * @return RuleInterface
     */
    public static function text(): RuleInterface
    {
        return self::asSanitizedString();
    }
}
