<?php namespace App\Web\Controllers;

use App\Api\{%PLURAL_CC%}Api;
use App\Json\Schemas\{%SINGULAR_CC%}Schema;
use App\Validation\{%SINGULAR_CC%}\{%PLURAL_CC%}ReadQuery;
use App\Web\Views;
use Limoncello\Flute\Contracts\Http\Controller\ControllerIndexInterface;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

//use Limoncello\Flute\Contracts\Http\WebControllerInterface;

/**
 * @package App
 *
 * @SuppressWarnings(PHPMD.StaticAccess)
 */
class {%PLURAL_CC%}Controller extends BaseController implements ControllerIndexInterface
{
    const SUB_URL = '/{%PLURAL_LC%}';

    /**
     * @inheritdoc
     */
    public static function index(
        array $routeParams,
        ContainerInterface $container,
        ServerRequestInterface $request
    ): ResponseInterface {
        // Default index implementation
        // - parses HTTP query parameters for filters, sorts and pagination parameters
        // - checks the query parameters comply with validation rules defined by a developer
        // - reads data from the database with filters, sorts and pagination applied via API specified
        // - generates HTML response with template specified (including pagination links)
        //
        // Consider it as a starting point and feel free to modify the code here and
        // in `BaseController` to meet your requirements.

        $queryRules = {%PLURAL_CC%}ReadQuery::class;
        $dataSchema = {%SINGULAR_CC%}Schema::class;
        $apiClass   = {%PLURAL_CC%}Api::class;
        $templateId = Views::{%PLURAL_UC%}_INDEX_PAGE; // <-- set valid View ID here

        $extraParams = [
//            'title'         => '{%PLURAL_CC%} page',
//            'content_text'  => 'Hello world!',
//            'url_to_create' => static::createUrl($container, {%SINGULAR_CC%}Schema::TYPE, static::METHOD_INSTANCE),
        ];

        return self::defaultIndex($queryRules, $dataSchema, $apiClass, $templateId, $container, $request, $extraParams);
    }
}
