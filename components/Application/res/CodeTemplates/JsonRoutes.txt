<?php namespace App\Routes;

use App\Json\Controllers\{%PLURAL_CC%}Controller;
use App\Json\Schemas\{%SINGULAR_CC%}Schema;
use Limoncello\Contracts\Application\RoutesConfiguratorInterface;
use Limoncello\Contracts\Routing\GroupInterface;
use Limoncello\Flute\Http\Traits\FluteRoutesTrait;
use Limoncello\Flute\Package\FluteContainerConfigurator;

/**
 * @package App
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class {%SINGULAR_CC%}ApiRoutes implements RoutesConfiguratorInterface
{
    use FluteRoutesTrait;

    /**
     * @inheritdoc
     *
     * @SuppressWarnings(PHPMD.StaticAccess)
     */
    public static function configureRoutes(GroupInterface $routes): void
    {
        // Every group, controller and even method may have custom `Request` factory and `Container` configurator.
        // Thus container for `API` and `Web` groups can be configured differently which could be used for
        // improving page load time for every HTTP route.
        // Container can be configured even for individual controller method (e.g. `PaymentsController::index`).
        // Also custom middleware could be specified for a group, controller or method.

        $routes
            // JSON API group
            // This group uses custom exception handler to provide error information in JSON API format.
            ->group(ApiRoutes::API_URI_PREFIX, function (GroupInterface $routes): void {

                $routes->addContainerConfigurators([
                    FluteContainerConfigurator::CONFIGURE_EXCEPTION_HANDLER,
                ])->addMiddleware([
                    //
                ]);

                self::apiController($routes, {%SINGULAR_CC%}Schema::TYPE, {%PLURAL_CC%}Controller::class);
//                self::relationship($routes, {%SINGULAR_CC%}Schema::TYPE, {%SINGULAR_CC%}Schema::REL_OTHERS, {%PLURAL_CC%}Controller::class, 'readOthers');

            });
    }

    /**
     * This middleware will be executed on every request even when no matching route is found.
     *
     * @return string[]
     */
    public static function getMiddleware(): array
    {
        return [
            //ClassName::class,
        ];
    }
}
